{
  "fileTypes": ["fish"],
  "firstLineMatch": "^#!.*(fish)",
  "foldingStartMarker": "^\\s*(function|while|if|switch|for|begin)\\s.*$",
  "foldingStopMarker": "^\\s*end\\s*$",
  "keyEquivalent": "^~F",
  "name": "fish",
  "patterns": [
    {
      "begin": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.fish" }
      },
      "comment": "Double quoted string",
      "end": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.fish" }
      },
      "name": "string.quoted.double.fish",
      "patterns": [
        { "include": "#variable" },
        {
          "comment": "https://fishshell.com/docs/current/#quotes",
          "match": "\\\\(\\\"|\\$|$|\\\\)",
          "name": "constant.character.escape.fish"
        }
      ]
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.fish" }
      },
      "comment": "Single quoted string",
      "end": "'",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.fish" }
      },
      "name": "string.quoted.single.fish",
      "patterns": [
        {
          "comment": "https://fishshell.com/docs/current/#quotes",
          "match": "\\\\('|`|\\\\)",
          "name": "constant.character.escape.fish"
        }
      ]
    },
    {
      "captures": { "1": { "name": "punctuation.definition.comment.fish" } },
      "comment": "line comment",
      "match": "(?<!\\$)(#)(?!\\{).*$\\n?",
      "name": "comment.line.number-sign.fish"
    },
    {
      "comment": "control structures requiring an end",
      "match": "(?<!\\.)\\b(function|while|if|else|switch|for|in|begin|end)\\b(?![?!])",
      "name": "keyword.control.fish"
    },
    { "match": "(?<!\\.)\\bfunction\\b(?![?!])", "name": "storage.type.fish" },
    { "match": "\\|", "name": "keyword.operator.pipe.fish" },
    {
      "comment": "IO Redirection",
      "match": "(?x:\n<|# Standard Input\n(>|\\^|>>|\\^\\^)(&[012\\-])?| # Redirection of stderr\n[012](<|>|>>)(&[012\\-])? # Redirect input/output of file descriptors\n)",
      "name": "keyword.operator.redirect.fish"
    },
    { "match": "&", "name": "keyword.operator.background.fish" },
    { "match": "\\*\\*|\\*|\\?", "name": "keyword.operator.glob.fish" },
    {
      "captures": { "1": { "name": "string.other.option.fish" } },
      "comment": "command short/long options",
      "match": "\\s(-{1,2}[a-zA-Z_\\-0-9]+|-\\w)\\b"
    },
    {
      "comment": "builtin shellscript functions listed by functions -a",
      "match": "(?x)\\b(abbr|alias|bg|cd|cdh|contains_seq|delete-or-exit|dirh|dirs|disown|down-or-search|edit_command_buffer|export|fg|fish_breakpoint_prompt|fish_clipboard_copy|fish_clipboard_paste|fish_config|fish_default_key_bindings|fish_default_mode_prompt|fish_git_prompt|fish_hg_prompt|fish_hybrid_key_bindings|fish_indent|fish_key_reader|fish_md5|fish_mode_prompt|fish_npm_helper|fish_opt|fish_print_git_action|fish_print_hg_root|fish_prompt|fish_sigtrap_handler|fish_svn_prompt|fish_title|fish_update_completions|fish_vcs_prompt|fish_vi_cursor|fish_vi_key_bindings|funced|funcsave|grep|help|history|hostname|isatty|kill|la|ll|ls|man|nextd|nextd-or-forward-word|open|popd|prevd|prevd-or-backward-word|prompt_hostname|prompt_pwd|psub|pushd|realpath|seq|setenv|suspend|trap|type|umask|up-or-search|vared|wait)\\b",
      "name": "support.function.script.fish"
    },
    {
      "comment": "builtin commands listed by builtin -n",
      "match": "(?x)\\b(\\s\\.\\s|and|argparse|begin|bg|bind|block|break|breakpoint|builtin|case|cd|command|commandline|complete|contains|continue|count|disown|echo|else|emit|end|eval|exec|exit|false|fg|for|function|functions|history|if|jobs|math|not|or|printf|pwd|random|read|realpath|return|set|set_color|source|status|string|switch|test|time|true|ulimit|wait|while)\\b",
      "name": "support.function.builtin.fish"
    },
    {
      "comment": "standard Unix utilities as specified in IEEE Std 1003.1 (2004 edition)",
      "match": "(?x)\\b(admin|alias|ar|asa|at|awk|basename|batch|bc|bg|break|c99|cal|cat|cd|cflow|chgrp|chmod|chown|cksum|cmp|colon|comm|command|compress|continue|cp|crontab|csplit|ctags|cut|cxref|date|dd|delta|df|diff|dirname|dot|du|echo|ed|env|eval|ex|exec|exit|expand|export|expr|false|fc|fg|file|find|fold|fort77|fuser|gencat|get|getconf|getopts|grep|hash|head|iconv|id|ipcrm|ipcs|jobs|join|kill|lex|link|ln|locale|localedef|logger|logname|lp|ls|m4|mailx|make|man|mesg|mkdir|mkfifo|more|mv|newgrp|nice|nl|nm|nohup|od|paste|patch|pathchk|pax|pr|printf|prs|ps|pwd|qalter|qdel|qhold|qmove|qmsg|qrerun|qrls|qselect|qsig|qstat|qsub|read|readonly|renice|return|rm|rmdel|rmdir|sact|sccs|sed|set|sh|shift|sleep|sort|split|strings|strip|stty|tabs|tail|talk|tee|test|time|times|touch|tput|tr|trap|true|tsort|tty|type|ulimit|umask|unalias|uname|uncompress|unexpand|unget|uniq|unlink|unset|uucp|uudecode|uuencode|uustat|uux|val|vi|wait|wc|what|who|write|xargs|yacc|zcat)\\b",
      "name": "support.function.unix.fish"
    },
    { "include": "#variable" },
    { "include": "#escape" }
  ],
  "repository": {
    "escape": {
      "patterns": [
        {
          "comment": "single character character escape sequences",
          "match": "\\\\[abefnrtv $*?~#(){}\\[\\]<>^&|;\"']",
          "name": "constant.character.escape.single.fish"
        },
        {
          "comment": "escapes the ascii character with the specified value (hexadecimal)",
          "match": "\\\\x[0-9a-fA-F]{1,2}",
          "name": "constant.character.escape.hex-ascii.fish"
        },
        {
          "comment": "escapes a byte of data with the specified value (hexadecimal). If you are using mutibyte encoding, this can be used to enter invalid strings. Only use this if you know what are doing.",
          "match": "\\\\X[0-9a-fA-F]{1,2}",
          "name": "constant.character.escape.hex-byte.fish"
        },
        {
          "comment": "escapes the ascii character with the specified value (octal)",
          "match": "\\\\[0-7]{1,3}",
          "name": "constant.character.escape.octal.fish"
        },
        {
          "comment": "escapes the 16-bit unicode character with the specified value (hexadecimal)",
          "match": "\\\\u[0-9a-fA-F]{1,4}",
          "name": "constant.character.escape.unicode-16-bit.fish"
        },
        {
          "comment": "escapes the 32-bit unicode character with the specified value (hexadecimal)",
          "match": "\\\\U[0-9a-fA-F]{1,8}",
          "name": "constant.character.escape.unicode-32-bit.fish"
        },
        {
          "comment": "escapes the control sequence generated by pressing the control key and the specified letter",
          "match": "\\\\c[a-zA-Z]",
          "name": "constant.character.escape.control.fish"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "comment": "Built-in variables visible by pressing $ TAB TAB in a new shell",
          "captures": {
            "1": { "name": "punctuation.definition.variable.fish" }
          },
          "match": "(\\$)(argv|fish_bind_mode|fish_color_autosuggestion|fish_color_cancel|fish_color_command|fish_color_comment|fish_color_cwd|fish_color_cwd_root|fish_color_end|fish_color_error|fish_color_escape|fish_color_hg_added|fish_color_hg_clean|fish_color_hg_copied|fish_color_hg_deleted|fish_color_hg_dirty|fish_color_hg_modified|fish_color_hg_renamed|fish_color_hg_unmerged|fish_color_hg_untracked|fish_color_history_current|fish_color_host|fish_color_host_remote|fish_color_match|fish_color_normal|fish_color_operator|fish_color_param|fish_color_quote|fish_color_redirection|fish_color_search_match|fish_color_selection|fish_color_status|fish_color_user|fish_color_valid_path|fish_complete_path|fish_function_path|fish_greeting|fish_key_bindings|fish_pager_color_completion|fish_pager_color_description|fish_pager_color_prefix|fish_pager_color_progress|fish_pid|fish_prompt_hg_status_added|fish_prompt_hg_status_copied|fish_prompt_hg_status_deleted|fish_prompt_hg_status_modified|fish_prompt_hg_status_order|fish_prompt_hg_status_unmerged|fish_prompt_hg_status_untracked|history|hostname|last_pid|pipestatus|status|umask|version)\\b",
          "name": "variable.language.fish"
        },
        {
          "captures": {
            "1": { "name": "punctuation.definition.variable.fish" }
          },
          "match": "(\\$)[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "variable.other.normal.fish"
        }
      ]
    }
  },
  "scopeName": "source.fish",
  "uuid": "9CA6DB6F-A16F-4836-A058-617C7378775D"
}
